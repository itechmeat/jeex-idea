# OpenTelemetry Collector Configuration for JEEX IDEA Observability Stack
# Full-Stack Configuration with Managed Dashboard Support
# Variant A: OpenTelemetry Full-Stack with Managed Dashboard

receivers:
  # OTLP receivers for traces, metrics, and logs from application services
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://localhost:5210"
            - "http://localhost:3000"
            - "http://localhost:5200"

  # Prometheus metrics receiver for scraping existing endpoints
  prometheus:
    config:
      scrape_configs:
        - job_name: "otel-collector"
          static_configs:
            - targets: ["localhost:9464"]
          scrape_interval: 15s
        - job_name: "jeex-idea-api"
          static_configs:
            - targets: ["api:8000"]
          scrape_interval: 15s
          metrics_path: "/metrics"

  # File receiver for reading existing log files
  filelog:
    include:
      - /tmp/*.log
    start_at: beginning

processors:
  # Batch processor for efficient data transmission
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Resource processor for adding global attributes
  resource:
    attributes:
      - key: service.name
        value: "jeex-idea"
        action: upsert
      - key: environment
        value: "development"
        action: upsert
      - key: deployment.version
        value: "0.1.0"
        action: upsert

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 256
    spike_limit_mib: 64
    check_interval: 5s

  # Resource detection processor
  resourcedetection:
    detectors: [env, system]
    timeout: 10s
    override: false

  # Transform processor for data sanitization and enrichment
  transform:
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - set(attributes["project_id"], resource.attributes["project_id"]) where resource.attributes["project_id"] != nil
          - set(attributes["correlation_id"], resource.attributes["correlation_id"]) where resource.attributes["correlation_id"] != nil

  # Resource processor for project-based tagging
  resource/k8s:
    attributes:
      - key: k8s.pod.name
        action: delete
      - key: k8s.namespace.name
        action: delete
      - key: k8s.deployment.name
        action: delete

exporters:
  # Prometheus exporter for metrics exposure
  prometheus:
    endpoint: "0.0.0.0:9464"
    namespace: "jeex_idea"
    const_labels:
      environment: "development"
      service: "jeex-idea"
    send_timestamps: true
    metric_expiration: 180m
    enable_open_metrics: true

  # Simple file exporter for MVP (development only)
  # SECURITY: This exporter should be disabled in production environments
  # as it writes sensitive telemetry data to a temporary file
  file:
    path: /tmp/telemetry.json

  # Debug exporter for development troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 1
    sampling_thereafter: 1000

extensions:
  # Health check extension (available for Docker health checks)
  health_check:
    endpoint: 0.0.0.0:13133

  # Pprof extension for performance profiling (localhost only)
  pprof:
    endpoint: 127.0.0.1:1777

  # ZPages extension for live debugging (localhost only)
  zpages:
    endpoint: 127.0.0.1:55679

service:
  extensions: [health_check, pprof, zpages]

  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors:
        [memory_limiter, resource, transform, resourcedetection, batch]
      exporters: [debug, file]

    # Metrics pipeline (NO file export - only Prometheus + debug)
    metrics:
      receivers: [otlp, prometheus]
      processors:
        [memory_limiter, resource, transform, resourcedetection, batch]
      exporters: [prometheus, debug]

    # Logs pipeline
    logs:
      receivers: [otlp, filelog]
      processors:
        [memory_limiter, resource, transform, resourcedetection, batch]
      exporters: [debug, file]

  # Telemetry configuration for the collector itself
  telemetry:
    metrics:
      address: 0.0.0.0:8889
      level: detailed
    logs:
      level: info
      development: true
# Configuration validation and performance tuning
# Target: <5% overhead for application performance
# Resource limits: 256MB memory, 0.25 CPU cores
