[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jeex-idea-backend"
version = "1.0.0"
description = "JEEX Idea system backend"
authors = [
    {name = "JEEX Idea Team", email = "team@jeex.idea"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
Homepage = "https://github.com/jeex-idea/jeex-idea"
Repository = "https://github.com/jeex-idea/jeex-idea"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.11"
# Core checks that catch real bugs
check_untyped_defs = true
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
ignore_errors = false

# Relaxed settings for development practicality
disallow_any_generics = false  # Too strict for external libs
disallow_untyped_defs = false  # Allow gradual typing
no_implicit_optional = true   # Keep this for clarity

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "uvicorn.*",
    "pydantic.*",
    "sqlalchemy.*",
    "alembic.*",
    "redis.*",
    "qdrant_client.*",
    "structlog.*",
    "python-multipart.*",
    "python-jose.*",
    "passlib.*",
    "bcrypt.*",
]
ignore_missing_imports = true

# Override for test files
[[tool.mypy.overrides]]
module = [
    "tests.*",
]
# Tests can be more relaxed
disallow_untyped_defs = false
warn_return_any = false
disable_error_code = ["override", "var-annotated", "call-arg", "no-untyped-def"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "asyncio: mark test as async",
    "integration: mark test as integration test",
    "slow: mark test as slow running",
    "unit: mark test as unit test",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
# Enable the same set of rules as flake8 + more
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "PYI",  # flake8-pyi
    "RUF",  # ruff-specific rules
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]

# Ignore rules that conflict with project patterns
ignore = [
    "B008",  # FastAPI Depends() in argument defaults is acceptable
    "S324",  # MD5 usage for cache keys (not cryptographic)
    "ANN401", # Any types in generic utilities are acceptable
]

# Allow unused variables when they start with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Allow assert in tests
"alembic/**/*.py" = ["E501"]  # Allow long lines in migrations
"**/conftest.py" = ["ANN"]  # Skip annotations in test config

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"
# Like Black, ensure files end with a newline
line-ending = "auto"
# Enable range formatting
skip-magic-trailing-comma = false

[tool.bandit]
exclude_dirs = ["tests", ".git", "__pycache__"]
skips = ["B101", "B601", "B602"]